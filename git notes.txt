Devops engineer  the cloud provider which we are using Amazon Web Services (AWS) 

start with the tools 

1. Git as a version control tool
2. Maven as a Build tool
3. Tomcat for deploying web applications
4. Jenkins for continuous integration and continuous development tool
5 Monitoring Tool slack 
6. Ansible for configuration management tool
7. Docker as a containerization tool
8. Kubernetes as a container orchestration tool
9. Nagios as a monitoring tool all the servers 
10. J frog as a storage Artifacts  
11. Terraform 

 Could Platform 

Aws Amazon Web Services 

Linux Basic and Advance concepts 


 






GIT
Download links
Git :
https://git-scm.com/

Git hub :

https://github.com/ 

 
Labwork(06-01-22)

 491  touch f1
  492  git init
  493  git satus
  494  git status
  495  git add f1
  496  git status
  497  git commit -m "This is my f1 file"
  498  git log
  499  git remote add origin https://github.com/krishnavagu/SBI-BANK.git
  500  git push -u origin master
  501  ll
  502  touch f2
  503  git status
  504  git add .
  505  git status
  506  git commit -m "this is my f2 file"
  507  git log
  508  git config --list
  509  git push -u origin master
  510  history





LAB WORK -1:

224  git init
  225  touch f1
  226  ll
  227  git status
  228  git add f1
  229  git status
  230  git commit -m "this is my f1 file"
  231  git log
  232  git log
  233  git --global --replace-all user.name "Ramrav"
  234  git config --global --replace-all user.name "Ramrav"
  235  git config --global --replace-all user.mail "rram.dba@gmail.com"
  236  git log
  237  exit
  238  git log
  241  git config --list
  242  touch f2
  243  git add f2
  244  git status
  245  git commit -m "this is my F2 file "
  246  git log
  247  git config --global --replace-all user.email "rram.dba@gmail.com"
  248  git config --list
  249  touch f3
  250  git add f3
  251  git log
  252  git status
  253  git commit -m "this is my f3 file"
  254  git log
  255  ls
  256  lligin mastigin mastergit 
  257  git remote add origin https://github.com/Ramrav/Devopsbyram.git
  258  git push -u orgin master
  259  git push -u origin master






Before Commit Git Config :

Set the name and email  for Git to use when you commit:
 $ git config --global user.name “Bugs Bunny”
 $ git config --global user.email bugs@gmail.com
 $ git config --global push.default simple
    
You can call git config –list to verify these are set.
These will be set globally for all Git projects you work with.
You can also set variables on a project-only basis by not using the
 --global flag.

  

============================= END=====================================

Git Replace Commds

git config --global --replace-all user.name "FName LName"
from krishna vvs to everyone:    7:16 AM
git config --global --replace-all user.mail "mail-id@domain.com"






Local Repository 

Every VCS tool provides a private workplace as a working copy. Developers make changes in their private workplace and after commit, these changes become a part of the repository


Working Directory and Staging Area or Index 

The working directory is the place where files are checked out. In other CVCS, developers generally make modifications and commit their changes directly to the repository. But Git uses a different strategy. Git doesn’t track each and every modified file. Whenever you do commit an operation, Git looks for the files present in the staging area. Only those files present in the staging area are considered for commit and not all the modified files. Let us see the basic workflow of Git.

Step 1: You modify a file from the working directory. 
Step 2: You add these files to the staging area. 
Step 3: You perform commit operation that moves the files from the staging area. After push operation, it stores the changes permanently to the Git repository.

 



Git BASH :

Git Bash is an application for Microsoft Windows environments which provides an emulation layer for a Git command line experience. Bash is an acronym for Bourne Again Shell.

 

Git Config :

Set the name and email  for Git to use when you commit:
 $ git config --global user.name “Bugs Bunny”
 $ git config --global user.email bugs@gmail.com
 $ git config --global push.default simple
    
You can call git config –list to verify these are set.
These will be set globally for all Git projects you work with.
You can also set variables on a project-only basis by not using the
 --global flag.


Branches :
Branches are used to create another line of development. By default, Git has a master branch, which is same as trunk in Subversion. Usually, a branch is created to work on a new feature. Once the feature is completed, it is merged back with the master branch and we delete the branch.
Every branch referenced by HEAD, which points to the latest commit in the branch. Whenever you make a commit, HEAD is updated with the latest commit.

To create a branch called experimental:
$ git branch experimental
To list all branches: (* shows which one you are currently on)
$ git branch
To switch to the experimental branch:
$ git checkout experimental
Difference between branches:
$ git diff master <your_branch>
Merge branches :
$ git merge <source_branch> <destination_branch>

Error :

vagus@LAPTOP-FQHHP94O MINGW64 /p/LAB-Document/Devops-new batch/GIT (master)
$ git merge Payment
Auto-merging f1
CONFLICT (content): Merge conflict in f1
Automatic merge failed; fix conflicts and then commit the result.




 

LAB Work-2 (07-01-2022) :

502  git branch
  503  git branch credit-branch
  504  git branch
  505  git checkout credit-branch
  506  ll
  507  touch credit-files
  508  ll
  509  git status
  510  git add .
  511  git status
  512  git commit -m "this is my credit-branch"
  513  git log
  514  git log --oneline
  515  git push -u origin credit-branch
  516  clear
  517  git checkout master
  518  ll
  519  git branch payment-branch
  520  git branch
  521  git checkout payment-branch
  522  ll
  523  touch payment-files
  524  git status
  525  git add .
  526  git status
  527  git commit -m "This is my Payment-Branch"
  528  git log --oneline
  529  git push -u origin payment-branch
  530  clear
  531  git checkout master
  532  git branch
  533  ll
  534  vi f1
  535  git status
  536  git add f1
  537  git status
  538  git commit -m "updated my f1 file"
  539  git log --oneline
  540  git push -u origin master
  541  clear
  542  git checkout credit-branch
  543  ll
  544  vi f1
  545  git status
  546  git add f1
  547  git status
  548  git commit -m "updated file in my Credit-branch"
  549  git log --oneline
  550  git push -u origin credit-branch
  551  git checkout master
  552  clear
  553  git branch
  554  git merge credit-branch
  555  ll
  556  cat f1
  557  vi f1
  558  cat f1
  559  git status
  560  git add .
  561  git status
  562  git commit -m "latest merging commit "
  563  git log --oneline
  564  git push -u origin master
  565  clear
  566  git branch
  567  git merge payment-branch
  568  git push -u origin master
  569  history

  ================================END=================================



GIT Checkout /Git Revert / Git Reset

we will see how to ,

1) undo uncommited changes

git checkout -- <file name>

2) undo commited changes

git revert <commitid>

3) Resetting changes

git reset 

git reset 's function is to take the current branch and reset it to point somewhere else, and possibly bring the index and work tree along. More concretely, if your master branch (currently checked out) is like this



Changes to uncommited file reset 
$ git reset <file>

 Move only to HEAD pointer:
$ git reset --soft

Removed to commited id and kept in stage

Move the HEAD pointer & reset the staging area (default):
$ git reset --mixed

Removed commited id and kept in the working area

Move the HEAD pointer, resets staging area & working tree to the new HEAD:
$ git reset --hard


 

(OR)




 
Step -1 :


Create sample file in Git hub 
 


Step -2 :

Pull the code :

Using this command 

Git pull











LABWORK -3:(11/01/22)

502  git pull
  503  ll
  504  cat Git-Pullfile
  505  ll
  506  git pull
  507  ll
  508  cat index.html
  509  clear
  510  ll
  511  vi Git-Pullfile
  512  cat Git-Pullfile
  513  git status
  514  git checkout Git-Pullfile
  515  cat Git-Pullfile
  516  ll
  517  cat Git-Pullfile
  518  vi Git-Pullfile
  519  cat Git-Pullfile
  520  Git status
  521  git add .
  522  Git status
  523  git commit -m "updated Git-pullfile"
  524  git log --oneline
  525  git revert 15e692f
  526  cat Git-Pullfile
  527  clear
  528  ll
  529  vi index.html
  530  cat index.html
  531  git status
  532  git add index.html
  533  git status
  534  git commit -m "now i`m using git --soft"
  535  git commit -m "now i`m using git--soft"
  536  git commit -m "now i`m using gitsoft"
  537  clear
  538  ll
  539  git status
  540  git commit - m "Updated index.html (git-soft)"
  541  git commit -m "Updated index.html (git-soft)"
  542  git log --oneline
  543  git status
  544  git reset --soft HEAD~1
  545  git status
  546  cat index.html
  547  git log --oneline
  548  clear
  549  ll
  550  git status
  551  vi index.html
  552  git add .
  553  git status
  554  git commit -m "updated my index.html(git--mixed)"
  555  git log --oneline
  556  git status
  557  git reset --mixed HEAD~1
  558  git status
  559  cat index.html
  560  git log --oneline
  561  clear
  562  ll
  563  vi index.html
  564  git status
  565  git add .
  566  git status
  567  git commit -m "updated my index.html file (git hard)"
  568  git log --oneline
  569  git reset --hard HEAD~1
  570  ll
  571  cat index.html
  572  git status
  573  ll
  574  git log --oneline
  575  clear
  576  git clone https://github.com/krishnavagu/SBI-BANK.git
  577  ll
  578  cd SBI-BANK/
  579  ll
  580  clear
  581  ll
  582  git rm f1 f2
  583  ll
  584  ll
  585  history
 
=================================END================================






Git Clone :

To Download to Github to locally using this command

Git clone <URL Name>

Git clone https://github.com/krishnavagu/Redbus.git




GIT PULL vs Git Fetch 

The main difference between GIT Pull and GIT Fetch is that GIT Pull command downloads the changes in the remote repository and merges those changes and store them on the local repository while
Git pull = git fetch + git merge 
 GIT Fetch command allows retrieving the changes made in the remote repository without merging them




 
 

 

 
  

Git cherry pick :

Git Cherry Pick. git cherry-pick is a powerful command that enables arbitrary Git commits to be picked by reference and appended to the current working HEAD. Cherry picking is the act of picking a commit from a branch and applying it to another. git cherry-pick can be useful for undoing changes.

 



LABWORK:(13-01-2022)

 502  git log
  503  git log --oneline
  504  git log --payment-branch
  505  git log payment-branch
  506  git log --oneline
  507  git log --oneline --grep f1
  508  git log --oneline --grep f2
  509  clear
  510  git log -1
  511  git log -2
  512  git log -3
  513  clear
  514  ll
  515  cd SBI-BANK/
  516  ll
  517  git log --oneline
  518  git tag R1-version1.0
  519  git log --oneline
  520  git tag -a version2.0 -m "this is my v2" 4ab4ca3
  521  git log --oneline
  522  git tag -a version3.0 -m "this is my v2" 3400c99
  523  git log --oneline
  524  git tag
  525  git show R1-version1.0
  526  git tag
  527  git tag -d version3.0
  528  git log --oneline
  529  git tag -d version2.0
  530  git log --oneline
  531  clear
  532  ll
  533  touch one.sh
  534  touch two.sh
  535  ll
  536  git rm one.sh two.sh
  537  git add one.sh two.sh
  538  ll
  539  git status
  540  git commit -m "one.sh two.sh"
  541  clear
  542  git log --oneline
  543  ll
  544  git rm one.sh
  545  git rm two.sh
  546  ll
  547  git stash
  548  ll
  549  git stash list
  550  ll
  551  git rm one.sh
  552  git rm two.sh
  553  ll
  554  git stash list
  555  git stash show
  556  git stash one.sh
  557  git stash list
  558  git stash apply stash@{0}
  559  git restore --staged one.sh
  560  ll
  561  git restore one.sh
  562  ll
  563  git restore two.sh
  564  git stash apply stash@{0}
  565  ll
  566  git stash
  567  ll
  568  git stash list
  569  git stash show
  570  git stash list
  571  ll
  572  git rm one.sh two.sh
  573  ll
  574  git stash list
  575  git stash pop
  576  ll
  577  git restore two.sh
  578  git restore one.sh
  579  ll
  580  git stash pop
  581  git stash
  582  ll
  583  git stash list
  584  git stash clear
  585  git stash list
  586  history
 
===============================END===================================

ll
llgit git

